// –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞

#define WIFI_SSID "ssid" // –Ω–∞–∑–≤–∞–Ω–∏–µ Wifi —Å–µ—Ç–∏
#define WIFI_PASS "pass" // –ø–∞—Ä–æ–ª—å Wifi —Å–µ—Ç–∏
#define BOT_TOKEN "1234567890:cjfkdshfkjdscnjdskfhjkgnfdjgkfdgnjf" // —Ç–æ–∫–µ–Ω –±–æ—Ç–∞, —É–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ https://t.me/BotFather
#define OWM_API_KEY "5edd67cb421961279ee47a4f6765f7d9" // API key for OpenWeatherMap, –ø–æ–ª—É—á–∏—Ç—å –∑–¥–µ—Å—å https://home.openweathermap.org/api_keys

#include <FastBot.h>

FastBot bot(BOT_TOKEN);

#include <Arduino_JSON.h>

String json_array;
WiFiClient wifiClient;

void setup() {
  connectWiFi();

  bot.attach(newMsg);
}

// –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
void newMsg(FB_msg & msg) {
  // –≤—ã–≤–æ–¥–∏–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
  Serial.println(msg.toString());

  String server = "http://api.openweathermap.org/data/2.5/weather?q=" + msg.text + "&APPID=" + OWM_API_KEY + "&units=metric";

  json_array = GET_Request(server.c_str());
  Serial.println(json_array);
  JSONVar my_obj = JSON.parse(json_array);

  if (JSON.typeof(my_obj) == "undefined") {
    Serial.println("Parsing input failed!");
    bot.sendMessage("Parsing input failed!", msg.chatID);
    return;
  }

  Serial.print("JSON object = ");
  Serial.println(my_obj);
  Serial.print("Temperature: ");
  Serial.println(my_obj["main"]["temp"]);
  Serial.print("Pressure: ");
  Serial.println(my_obj["main"]["pressure"]);
  Serial.print("Humidity: ");
  Serial.println(my_obj["main"]["humidity"]);
  Serial.print("Wind Speed: ");
  Serial.println(my_obj["wind"]["speed"]);

  String answer = "–ì–æ—Ä–æ–¥: " + msg.text + "\nüå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + JSON.stringify(my_obj["main"]["temp"]) + "\n‚¨á –î–∞–≤–ª–µ–Ω–∏–µ: " + JSON.stringify(my_obj["main"]["pressure"]) + "\nüå´Ô∏è –í–∏–¥–∏–º–æ—Å—Ç—å: " + JSON.stringify(my_obj["main"]["humidity"]) + "\nüå™ –í–µ—Ç–µ—Ä: " + JSON.stringify(my_obj["wind"]["speed"]) + " –º/c";

  bot.sendMessage(answer, msg.chatID);
}

void loop() {
  bot.tick();
}

void connectWiFi() {
  delay(2000);
  Serial.begin(115200);
  Serial.println();

  WiFi.begin(WIFI_SSID, WIFI_PASS);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    if (millis() > 15000) ESP.restart();
  }
  Serial.println("Connected");
}

String GET_Request(const char * server) {
  HTTPClient http;
  http.begin(wifiClient, server);
  int httpResponseCode = http.GET();

  String payload = "{}";

  if (httpResponseCode > 0) {
    Serial.print("HTTP Response code: ");
    Serial.println(httpResponseCode);
    payload = http.getString();
  } else {
    Serial.print("Error code: ");
    Serial.println(httpResponseCode);
  }
  http.end();

  return payload;
}
